# 
# Note: This builds the project as an executable linked to a library built from
# its sources. This would be stupid and roundabout if it wasn't for how it also
# lets us share code between application and unit tests with no extra effort.
# 

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)

if(CMAKE_COMPILER_IS_GNUCXX OR APPLE)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=gnu++0x")
endif()

# These three are managed by the version bump script!
set(VERSION_MAJOR 0)
set(VERSION_MINOR 9)
set(VERSION_PATCH 2)

configure_file(version.h.in version.h)

# Info.plist values
set(APPLE_GUI_EXECUTABLE "KanColleTool")
set(APPLE_GUI_BUNDLE_NAME "KanColleTool")
set(APPLE_GUI_COPYRIGHT "Â© 2013-2014 the KanColleTool team")
set(APPLE_GUI_ICON "KanColleTool.icns")
set(APPLE_GUI_IDENTIFIER "com.kancolletool.KanColleTool")
set(APPLE_GUI_SHORT_VERSION_STRING "${VERSION}")
set(APPLE_GUI_BUNDLE_VERSION "${VERSION}")



#
# --> Find libraries and stuff
#
include("${PROJECT_SOURCE_DIR}/lib/includes.cmake")

find_package(Qt5Core)
find_package(Qt5Widgets)
find_package(Qt5Network)

if(WIN32)
	find_package(Qt5WinExtras)
endif(WIN32)



#
# --> Find sources
#
file(GLOB_RECURSE KanColleTool_FORMS ../forms/*.ui)
file(GLOB_RECURSE KanColleTool_SOURCES *.cpp *.h)
file(GLOB_RECURSE KanColleTool_RESOURCES ../resources/*.qrc)
file(GLOB KanColleTool_MAIN_CPP main.cpp)
file(GLOB KanColleTool_VERSION_H version.h)
list(REMOVE_ITEM KanColleTool_SOURCES ${KanColleTool_MAIN_CPP} ${KanColleTool_VERSION_H})

# Remove moc and uic files from the source list
file(GLOB KanColleTool_MOCS moc_*.cpp *_automoc.cpp ui_*.h)
list(REMOVE_ITEM KanColleTool_SOURCES "" ${KanColleTool_MOCS})

qt5_wrap_ui(KanColleTool_UIHEADERS ${KanColleTool_FORMS})
qt5_add_resources(KanColleTool_RESOURCE_SOURCES ${KanColleTool_RESOURCES})




#
# --> Build the common library
#
add_library(KCBase ${KanColleTool_SOURCES} ${KanColleTool_UIHEADERS} ${KanColleTool_RESOURCE_SOURCES})
target_link_libraries(KCBase KCSupport Qt5::Core Qt5::Widgets Qt5::Network)

if(APPLE)
	find_library(LIBOBJC objc)
	find_library(CARBON Carbon)
	target_link_libraries(KCBase ${LIBOBJC} ${CARBON})
endif(APPLE)

if(WIN32)
	target_link_libraries(KCBase Qt5::WinExtras)
endif(WIN32)



#
# --> Build the main application
#
if(APPLE)
	# Make a custom Info.plist
	configure_file(Info.plist.in ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Info.plist)
	
	# Copy bundle resources
	set_source_files_properties(../resources/KanColleTool.icns PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
	set(KanColleTool_EXTRASOURCES "../resources/KanColleTool.icns")
endif(APPLE)

add_executable(KanColleTool WIN32 MACOSX_BUNDLE ${KanColleTool_MAIN_CPP} ${KanColleTool_RESOURCE_SOURCES} ${KanColleTool_EXTRASOURCES} KanColleTool.rc)
target_link_libraries(KanColleTool KCBase)
set_target_properties(KanColleTool PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Info.plist)

if(UNIX AND NOT APPLE)
    set_property(TARGET KanColleTool PROPERTY OUTPUT_NAME "kancolletool")
endif()



#
# --> Installation
#
install(TARGETS KanColleTool RUNTIME DESTINATION bin BUNDLE DESTINATION .)



#
# --> IDE Organization
#
source_group("Autogenerated" REGULAR_EXPRESSION "((qrc|ui)_(.*)|.*_automoc\\.cpp)")
